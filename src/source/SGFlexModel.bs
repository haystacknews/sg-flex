class SGFlexModel
    private logger as dynamic

    private width as float
    private height as float

    ' See enums at the bottom of this file
    private direction as string
    private justifyContent as string
    private alignItems as string

    private mainAxis as string
    private crossAxis as string
    private mainDimension as string
    private crossDimension as string

    private childrenBoundingRects as object
    private childrenAccWidth as float
    private childrenAccHeight as float
    private childrenMaxHeight as float
    private childrenMaxWidth as float

    private accMainDimension as float
    private accCrossDimension as float

    ' @param {object[]} childrenBoundingRects - An array of bounding rects for each child.
    ' @param {object} [_args] - An object containing the following properties:
    ' @param {float} [_args.width] - The width of the parent container. If not present it will be set as the accumulated width of the children.
    ' @param {float} [_args.height] - The height of the parent container. If not present it will be set as the accumulated height of the children.
    ' @param {string} [_args.direction="row"] - The direction of the layout.
    ' @param {string} [_args.justifyContent="flexStart"] - The justification of the layout in the main axis.
    ' @param {string} [_args.alignItems="flexStart"] - The alignment of the layout in the cross axis.
    ' @param {object} [logger=invalid] - A `roku-log` instance.
    sub new(childrenBoundingRects as object, _args = {} as object, logger = invalid as dynamic)
        m.logger = logger

        m.childrenBoundingRects = childrenBoundingRects

        ' Default values for the arguments
        args = {
            width: -1,
            height: -1,
            direction: Direction.row,
            justifyContent: JustifyContent.flexStart,
            alignItems: AlignItems.flexStart
        }

        ' Replace default values with arguments passed from the constructor arguments
        for each key in _args.keys()
            args[key] = _args[key]
        end for

        m.validateArgs(args)

        m.direction = args.direction
        m.justifyContent = args.justifyContent
        m.alignItems = args.alignItems

        if (m.direction = Direction.row)
            m.mainAxis = Axis.x
            m.crossAxis = Axis.y
            m.mainDimension = Dimension.width
            m.crossDimension = Dimension.height
        else
            m.mainAxis = Axis.y
            m.crossAxis = Axis.x
            m.mainDimension = Dimension.height
            m.crossDimension = Dimension.width
        end if

        ' Set accumulated and maximum values
        m.childrenAccWidth = 0
        m.childrenAccHeight = 0
        m.childrenMaxWidth = 0
        m.childrenMaxHeight = 0
        for each childRect in childrenBoundingRects
            m.childrenAccWidth += childRect.width
            m.childrenAccHeight += childRect.height

            if (m.childrenMaxWidth < childRect.width)
                m.childrenMaxWidth = childRect.width
            end if

            if (m.childrenMaxHeight < childRect.height)
                m.childrenMaxHeight = childRect.height
            end if
        end for

        if (m.direction = Direction.row)
            m.accMainDimension = m.childrenAccWidth
            m.accCrossDimension = m.childrenAccHeight
        else
            m.accMainDimension = m.childrenAccHeight
            m.accCrossDimension = m.childrenAccWidth
        end if

        ' If the dimensions are not set (default value is -1),
        ' set them to the accumulated values
        if (args.width < 0)
            m.width = m.childrenAccWidth
        else
            m.width = args.width
        end if

        if (args.height < 0)
            m.height = m.childrenAccHeight
        else
            m.height = args.height
        end if
    end sub

    ' Returns a list of translations to apply to each original child at the given index
    ' to position them according to the `direction`, `justifyContent` and `alignItems` values.
    ' @returns { childIndex: integer, x: float, y: float }[]
    public function getTranslations() as object
        translations = []

        if (m.childrenBoundingRects.count() = 0)
            return translations
        end if

        ' Main axis translations
        if (m.justifyContent = JustifyContent.flexStart)
            if (m.childrenBoundingRects[0][m.mainAxis] <> 0)
                firstTranslation = { childIndex: 0 }
                ' In theory this should be `0`, but in practice some
                ' children may have a negative `x` or `y` value before being translated.
                firstTranslation[m.mainAxis] = m.childrenBoundingRects[0].[m.mainAxis] * -1
                translations.push(firstTranslation)
            end if

            for i = 1 to m.childrenBoundingRects.count() - 1
                translation = { childIndex: i }
                prevTranslation = m.getPreviousTranslation(i, translations)
                translation[m.mainAxis] = prevTranslation[m.mainAxis] + m.childrenBoundingRects[i - 1][m.mainDimension]
                translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]
                translations.push(translation)
            end for
        else if (m.justifyContent = JustifyContent.flexEnd)
            for i = 0 to m.childrenBoundingRects.count() - 1
                translation = { childIndex: i }

                if (i = 0)
                    translation[m.mainAxis] = m[m.mainDimension] - m.accMainDimension
                else
                    prevTranslation = m.getPreviousTranslation(i, translations)
                    translation[m.mainAxis] = prevTranslation[m.mainAxis] + m.childrenBoundingRects[i - 1][m.mainDimension]
                end if

                translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]

                translations.push(translation)
            end for
        else if (m.justifyContent = JustifyContent.center)
            spaceBefore = (m[m.mainDimension] - m.accMainDimension) / 2
            for i = 0 to m.childrenBoundingRects.count() - 1
                translation = { childIndex: i }
                if (i = 0)
                    translation[m.mainAxis] = spaceBefore
                else
                    prevTranslation = m.getPreviousTranslation(i, translations)
                    translation[m.mainAxis] = prevTranslation[m.mainAxis] + m.childrenBoundingRects[i - 1][m.mainDimension]
                end if
                translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]
                translations.push(translation)
            end for
        else if (m.justifyContent = JustifyContent.spaceBetween)
            if (m.childrenBoundingRects.count() > 1)
                ' SB = (P_dim - max(C_dim)) / (n - 1)
                spaceBetween = m[m.mainDimension]
                spaceBetween -= m.accMainDimension
                spaceBetween /= m.childrenBoundingRects.count() - 1

                for i = 1 to m.childrenBoundingRects.count() - 1
                    prevTranslation = m.getPreviousTranslation(i, translations)
                    prevChild = m.childrenBoundingRects[i - 1]

                    ' Translation formula (change "x" to "y" and "w" to "h" for direction = column)
                    ' T(n)_x = T(n-1)_x + C(n-1)_w + SB + (C(n-1)_x * -1)
                    ' We consider the last term to account for children
                    ' whose center of coordinates is not the top left of their boundingRect.
                    ' For example, children that are `LayoutGroup`s with `horizAlignment` = "center"
                    translatedMainAxis = prevTranslation[m.mainAxis]
                    translatedMainAxis += prevChild[m.mainDimension]
                    translatedMainAxis += spaceBetween
                    translatedMainAxis += m.childrenBoundingRects[i].[m.mainAxis] * -1

                    translation = { childIndex: i }
                    translation[m.mainAxis] = translatedMainAxis
                    translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]

                    translations.push(translation)
                end for
            end if
        else if (m.justifyContent = JustifyContent.spaceAround)
            if (m.childrenBoundingRects.count() > 1)
                spaceAround = m[m.mainDimension]
                spaceAround -= m.accMainDimension
                spaceAround /= m.childrenBoundingRects.count()

                for i = 0 to m.childrenBoundingRects.count() - 1
                    translation = { childIndex: i }

                    if (i = 0)
                        translation[m.mainAxis] = spaceAround / 2
                    else
                        prevTranslation = m.getPreviousTranslation(i, translations)
                        prevChild = m.childrenBoundingRects[i - 1]

                        translatedMainAxis = prevTranslation[m.mainAxis]
                        translatedMainAxis += prevChild[m.mainDimension]
                        translatedMainAxis += spaceAround
                        
                        translatedMainAxis += m.childrenBoundingRects[i].[m.mainAxis] * -1

                        translation[m.mainAxis] = translatedMainAxis
                        translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]
                    end if

                    translations.push(translation)
                end for
            end if
        else if (m.justifyContent = JustifyContent.spaceEvenly)
            if (m.childrenBoundingRects.count() > 1)
                spaceEvenly = m[m.mainDimension]
                spaceEvenly -= m.accMainDimension
                spaceEvenly /= m.childrenBoundingRects.count() + 1

                for i = 0 to m.childrenBoundingRects.count() - 1
                    translation = { childIndex: i }

                    if (i = 0)
                        translation[m.mainAxis] = spaceEvenly
                    else
                        prevTranslation = m.getPreviousTranslation(i, translations)
                        prevChild = m.childrenBoundingRects[i - 1]

                        translatedMainAxis = prevTranslation[m.mainAxis]
                        translatedMainAxis += prevChild[m.mainDimension]
                        translatedMainAxis += spaceEvenly
                        translatedMainAxis += m.childrenBoundingRects[i].[m.mainAxis] * -1

                        translation[m.mainAxis] = translatedMainAxis
                        translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis]
                    end if

                    translations.push(translation)
                end for
            end if
        end if

        ' Cross axis translations
        for i = 0 to m.childrenBoundingRects.count() - 1
            ' Check if there's an existing translation for the current child to reuse it.
            existingTranslationIndex = -1
            for j = 0 to translations.count() - 1
                if (translations[j].childIndex = i)
                    existingTranslationIndex = j
                    exit for
                end if
            end for

            if (m.alignItems = AlignItems.flexStart)
                if (existingTranslationIndex <> -1)
                    ' In theory this should be `0`, but in practice some
                    ' children may have a negative `x` or `y` value before being translated.
                    translations[existingTranslationIndex][m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis] * -1
                else
                    translation = { childIndex: i }
                    translation[m.mainAxis] = m.childrenBoundingRects[i][m.mainAxis]
                    translation[m.crossAxis] = m.childrenBoundingRects[i][m.crossAxis] * -1
                    translations.push(translation)
                end if
            else if (m.alignItems = AlignItems.flexEnd)
                ' The main dimension of the container (`width` or `height`)
                ' minus the main dimension of the child
                translatedCrossAxis = m[m.crossDimension] - m.childrenBoundingRects[i][m.crossDimension]
                translatedCrossAxis += m.childrenBoundingRects[i][m.crossAxis] * -1

                if (existingTranslationIndex <> -1)
                    translations[existingTranslationIndex][m.crossAxis] = translatedCrossAxis
                else
                    translation = { childIndex: i }
                    translation[m.mainAxis] = m.childrenBoundingRects[i][m.mainAxis]
                    translation[m.crossAxis] = translatedCrossAxis
                    translations.push(translation)
                end if
            else if (m.alignItems = AlignItems.center)
                ' Half of the main dimension of the container (`width` or `height`)
                ' minus the main dimension of the child
                translatedCrossAxis = (m[m.crossDimension] - m.childrenBoundingRects[i][m.crossDimension]) / 2
                translatedCrossAxis += m.childrenBoundingRects[i][m.crossAxis] * -1

                if (existingTranslationIndex <> -1)
                    translations[existingTranslationIndex][m.crossAxis] = translatedCrossAxis
                else
                    translation = { childIndex: i }
                    translation[m.mainAxis] = m.childrenBoundingRects[i][m.mainAxis]
                    translation[m.crossAxis] = translatedCrossAxis
                    translations.push(translation)
                end if
            end if
        end for

        return translations
    end function

    ' Validates the values for direction, justifyContent and alignItems.
    ' @throws Will throw an error if an argument is invalid
    private sub validateArgs(args as object)
        if ((args.direction <> Direction.row) and (args.direction <> Direction.column))
            if (m.logger <> invalid)
                m.logger.error(ErrorCode.invalidDirection, args.direction)
            end if
            @deviceOnly
            throw ErrorCode.invalidDirection
        end if

        if ((args.justifyContent <> JustifyContent.flexStart) and (args.justifyContent <> JustifyContent.flexEnd) and (args.justifyContent <> JustifyContent.center) and (args.justifyContent <> JustifyContent.spaceBetween) and (args.justifyContent <> JustifyContent.spaceAround) and (args.justifyContent <> JustifyContent.spaceEvenly))
            if (m.logger <> invalid)
                m.logger.error(ErrorCode.invalidJustifyContent, args.justifyContent)
            end if
            @deviceOnly
            throw ErrorCode.invalidJustifyContent
        end if

        if ((args.alignItems <> AlignItems.flexStart) and (args.alignItems <> AlignItems.flexEnd) and (args.alignItems <> AlignItems.center))
            if (m.logger <> invalid)
                m.logger.error(ErrorCode.invalidAlignItems, args.alignItems)
            end if
            @deviceOnly
            throw ErrorCode.invalidAlignItems
        end if
    end sub

    ' Returns the previous translation. If invalid, returns the previous child coordinates.
    private function getPreviousTranslation(currentIndex as integer, translations as object) as object
        prevTranslation = translations[translations.count() - 1]
        prevChild = m.childrenBoundingRects[currentIndex - 1]

        if (prevTranslation = invalid)
            if (prevChild <> invalid)
                prevTranslation = { x: prevChild.x, y: prevChild.y }
            else
                prevTranslation = { x: 0, y: 0 }
            end if
        end if

        return prevTranslation
    end function
end class

enum Direction
    row = "row"
    column = "column"
end enum

enum JustifyContent
    flexStart = "flexStart"
    flexEnd = "flexEnd"
    center = "center"
    spaceBetween = "spaceBetween"
    spaceAround = "spaceAround"
    spaceEvenly = "spaceEvenly"
end enum

enum AlignItems
    flexStart = "flexStart"
    flexEnd = "flexEnd"
    center = "center"
    ' The values `stretch` and `baseline` are not really possible since
    ' we can't modify the size of the children or inspect their contents.
end enum

enum Axis
    x = "x"
    y = "y"
end enum

enum Dimension
    width = "width"
    height = "height"
end enum

enum ErrorCode
    invalidDirection = "Invalid `direction` value."
    invalidJustifyContent = "Invalid `justifyContent` value."
    invalidAlignItems = "Invalid `alignItems` value."
end enum
